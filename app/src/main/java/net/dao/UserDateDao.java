package net.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.kehui.www.t_907_origin.datebase.UserDate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DATE".
*/
public class UserDateDao extends AbstractDao<UserDate, Long> {

    public static final String TABLENAME = "USER_DATE";

    /**
     * Properties of entity UserDate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property InfoId = new Property(1, String.class, "InfoId", false, "INFO_ID");
        public final static Property TestTime = new Property(2, long.class, "testTime", false, "TEST_TIME");
        public final static Property TestMethod = new Property(3, String.class, "testMethod", false, "TEST_METHOD");
        public final static Property TestRange = new Property(4, String.class, "testRange", false, "TEST_RANGE");
        public final static Property TestPosition = new Property(5, String.class, "testPosition", false, "TEST_POSITION");
        public final static Property CableFullLength = new Property(6, String.class, "cableFullLength", false, "CABLE_FULL_LENGTH");
        public final static Property CablePhase = new Property(7, String.class, "cablePhase", false, "CABLE_PHASE");
        public final static Property CableType = new Property(8, String.class, "cableType", false, "CABLE_TYPE");
        public final static Property FaultType = new Property(9, String.class, "faultType", false, "FAULT_TYPE");
        public final static Property FaultLength = new Property(10, String.class, "faultLength", false, "FAULT_LENGTH");
        public final static Property Gain = new Property(11, int.class, "Gain", false, "GAIN");
        public final static Property Language = new Property(12, String.class, "language", false, "LANGUAGE");
    }


    public UserDateDao(DaoConfig config) {
        super(config);
    }
    
    public UserDateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DATE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"INFO_ID\" TEXT," + // 1: InfoId
                "\"TEST_TIME\" INTEGER NOT NULL ," + // 2: testTime
                "\"TEST_METHOD\" TEXT," + // 3: testMethod
                "\"TEST_RANGE\" TEXT," + // 4: testRange
                "\"TEST_POSITION\" TEXT," + // 5: testPosition
                "\"CABLE_FULL_LENGTH\" TEXT," + // 6: cableFullLength
                "\"CABLE_PHASE\" TEXT," + // 7: cablePhase
                "\"CABLE_TYPE\" TEXT," + // 8: cableType
                "\"FAULT_TYPE\" TEXT," + // 9: faultType
                "\"FAULT_LENGTH\" TEXT," + // 10: faultLength
                "\"GAIN\" INTEGER NOT NULL ," + // 11: Gain
                "\"LANGUAGE\" TEXT);"); // 12: language
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String InfoId = entity.getInfoId();
        if (InfoId != null) {
            stmt.bindString(2, InfoId);
        }
        stmt.bindLong(3, entity.getTestTime());
 
        String testMethod = entity.getTestMethod();
        if (testMethod != null) {
            stmt.bindString(4, testMethod);
        }
 
        String testRange = entity.getTestRange();
        if (testRange != null) {
            stmt.bindString(5, testRange);
        }
 
        String testPosition = entity.getTestPosition();
        if (testPosition != null) {
            stmt.bindString(6, testPosition);
        }
 
        String cableFullLength = entity.getCableFullLength();
        if (cableFullLength != null) {
            stmt.bindString(7, cableFullLength);
        }
 
        String cablePhase = entity.getCablePhase();
        if (cablePhase != null) {
            stmt.bindString(8, cablePhase);
        }
 
        String cableType = entity.getCableType();
        if (cableType != null) {
            stmt.bindString(9, cableType);
        }
 
        String faultType = entity.getFaultType();
        if (faultType != null) {
            stmt.bindString(10, faultType);
        }
 
        String faultLength = entity.getFaultLength();
        if (faultLength != null) {
            stmt.bindString(11, faultLength);
        }
        stmt.bindLong(12, entity.getGain());
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(13, language);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String InfoId = entity.getInfoId();
        if (InfoId != null) {
            stmt.bindString(2, InfoId);
        }
        stmt.bindLong(3, entity.getTestTime());
 
        String testMethod = entity.getTestMethod();
        if (testMethod != null) {
            stmt.bindString(4, testMethod);
        }
 
        String testRange = entity.getTestRange();
        if (testRange != null) {
            stmt.bindString(5, testRange);
        }
 
        String testPosition = entity.getTestPosition();
        if (testPosition != null) {
            stmt.bindString(6, testPosition);
        }
 
        String cableFullLength = entity.getCableFullLength();
        if (cableFullLength != null) {
            stmt.bindString(7, cableFullLength);
        }
 
        String cablePhase = entity.getCablePhase();
        if (cablePhase != null) {
            stmt.bindString(8, cablePhase);
        }
 
        String cableType = entity.getCableType();
        if (cableType != null) {
            stmt.bindString(9, cableType);
        }
 
        String faultType = entity.getFaultType();
        if (faultType != null) {
            stmt.bindString(10, faultType);
        }
 
        String faultLength = entity.getFaultLength();
        if (faultLength != null) {
            stmt.bindString(11, faultLength);
        }
        stmt.bindLong(12, entity.getGain());
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(13, language);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserDate readEntity(Cursor cursor, int offset) {
        UserDate entity = new UserDate( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // InfoId
            cursor.getLong(offset + 2), // testTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // testMethod
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // testRange
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // testPosition
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cableFullLength
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cablePhase
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cableType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // faultType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // faultLength
            cursor.getInt(offset + 11), // Gain
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // language
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDate entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTestTime(cursor.getLong(offset + 2));
        entity.setTestMethod(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTestRange(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTestPosition(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCableFullLength(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCablePhase(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCableType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFaultType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFaultLength(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGain(cursor.getInt(offset + 11));
        entity.setLanguage(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserDate entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserDate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserDate entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
